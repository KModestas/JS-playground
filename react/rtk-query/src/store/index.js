import { configureStore } from '@reduxjs/toolkit'
import { setupListeners } from '@reduxjs/toolkit/query'
import { usersReducer } from './slices/usersSlice'
import { albumsApi } from './apis/albumsApi'
import { photosApi } from './apis/photosApi'

export const store = configureStore({
  reducer: {
    users: usersReducer,
    // use the reducerPath of each api as the reducer key e.g. albums to avoid hardcoding
    [albumsApi.reducerPath]: albumsApi.reducer,
    [photosApi.reducerPath]: photosApi.reducer
  },
  // add middlewares generated by your query API's to your store:
  middleware: getDefaultMiddleware => {
    return getDefaultMiddleware().concat(albumsApi.middleware).concat(photosApi.middleware)
  }
})

// This function sets up event listeners on the window object to detect when the application reconnects to the internet or when the tab is refocused, it can then dispatch actions in response. (used for refetchOnReconnect etc)
setupListeners(store.dispatch)

// import all thunks and api hooks for this central file:
export * from './thunks/fetchUsers'
export * from './thunks/addUser'
export * from './thunks/removeUser'
export { useFetchAlbumsQuery, useAddAlbumMutation, useRemoveAlbumMutation } from './apis/albumsApi'
export { useFetchPhotosQuery, useAddPhotoMutation, useRemovePhotoMutation } from './apis/photosApi'
